// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package snowflakeconnector.actions;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import net.snowflake.client.jdbc.SnowflakeResultSet;
import net.snowflake.client.jdbc.SnowflakeStatement;
import snowflakeconnector.SnowflakeConnector;
import snowflakeconnector.proxies.AsyncQueryResult;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class AsyncQueryExecute extends CustomJavaAction<IMendixObject>
{
	private java.lang.String sqlQuery;
	private IMendixObject __connectionBuilder;
	private snowflakeconnector.proxies.ConnectionBuilder connectionBuilder;

	public AsyncQueryExecute(IContext context, java.lang.String sqlQuery, IMendixObject connectionBuilder)
	{
		super(context);
		this.sqlQuery = sqlQuery;
		this.__connectionBuilder = connectionBuilder;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.connectionBuilder = __connectionBuilder == null ? null : snowflakeconnector.proxies.ConnectionBuilder.initialize(getContext(), __connectionBuilder);

		// BEGIN USER CODE
		
		// Initiate logger 
		ILogNode logger = Core.getLogger("SnowflakeConnector");
		
		// initiate result object 
		IMendixObject mxObject = Core.instantiate(context(), AsyncQueryResult.getType());
		AsyncQueryResult asyncQueryResult = AsyncQueryResult.load(getContext(), mxObject.getId());
		
		// initiate result message
		String Message = "";
		
				// check for empty sql query
				if(this.sqlQuery == null || this.sqlQuery.isEmpty())	{
				Message = "SQL Query is not provided";
				logger.error(Message);
				
				// set object result
				asyncQueryResult.setExecuted(false);
				asyncQueryResult.setMessage(Message);
			}
		
				else try {
					
				// Start executing async query
				ResultSet resultSet;
			    Connection connection = SnowflakeConnector.getConnection(connectionBuilder);
				logger.info("Creating snowflake connection");
			    Statement statement = connection.createStatement();
			    resultSet = statement.unwrap(SnowflakeStatement.class).executeAsyncQuery(this.sqlQuery);
			    String queryId = resultSet.unwrap(SnowflakeResultSet.class).getQueryID();
			    statement.close();
			    connection.close();
				Message = "Async query successfully executed";
				logger.info(Message);

  
				// Set object result
				asyncQueryResult.setExecuted(true);
				asyncQueryResult.setMessage(Message);
				asyncQueryResult.setQueryId(queryId);
				
				// Close connection
			    connection.close();
			    statement.close();
			   
				
			}
				// Catch errors
				catch(SQLException e)
			     {
					logger.error("SQLException: ");
			                        throw new SQLException(e.getMessage());
			     }		

				// Return result object
				return asyncQueryResult.getMendixObject();
				
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AsyncQueryExecute";
	}

	// BEGIN EXTRA CODE
		
	// END EXTRA CODE
}
